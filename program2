import java.util.*;

class TicketBookingSystem {
    private final int totalSeats;
    private final boolean[] seats;

    public TicketBookingSystem(int totalSeats) {
        this.totalSeats = totalSeats;
        this.seats = new boolean[totalSeats];
    }

    public synchronized boolean bookSeat(int seatNumber, String customerName) {
        if (seatNumber < 0 || seatNumber >= totalSeats) {
            System.out.println(customerName + " tried booking an invalid seat.");
            return false;
        }
        
        if (!seats[seatNumber]) {
            seats[seatNumber] = true;
            System.out.println(customerName + " successfully booked seat " + seatNumber);
            return true;
        } else {
            System.out.println(customerName + " tried booking seat " + seatNumber + ", but it is already taken.");
            return false;
        }
    }
}

class Customer extends Thread {
    private final TicketBookingSystem bookingSystem;
    private final int seatNumber;
    private final String customerName;

    public Customer(TicketBookingSystem bookingSystem, int seatNumber, String customerName, int priority) {
        this.bookingSystem = bookingSystem;
        this.seatNumber = seatNumber;
        this.customerName = customerName;
        setPriority(priority); // Set thread priority (higher for VIP)
    }

    @Override
    public void run() {
        bookingSystem.bookSeat(seatNumber, customerName);
    }
}

public class Main {
    public static void main(String[] args) {
        int totalSeats = 10;
        TicketBookingSystem bookingSystem = new TicketBookingSystem(totalSeats);

        // Creating customer threads with different priorities
        Customer vip1 = new Customer(bookingSystem, 3, "VIP Customer 1", Thread.MAX_PRIORITY);
        Customer vip2 = new Customer(bookingSystem, 5, "VIP Customer 2", Thread.MAX_PRIORITY);
        Customer regular1 = new Customer(bookingSystem, 3, "Regular Customer 1", Thread.NORM_PRIORITY);
        Customer regular2 = new Customer(bookingSystem, 5, "Regular Customer 2", Thread.NORM_PRIORITY);
        Customer regular3 = new Customer(bookingSystem, 7, "Regular Customer 3", Thread.MIN_PRIORITY);

        // Start the threads
        vip1.start();
        vip2.start();
        regular1.start();
        regular2.start();
        regular3.start();

        // Wait for all threads to finish
        try {
            vip1.join();
            vip2.join();
            regular1.join();
            regular2.join();
            regular3.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Ticket booking process completed.");
    }
}
